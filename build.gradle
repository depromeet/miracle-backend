def javaProjects = [
    project(':miracle-api'),
    project(':miracle-domain')
]

buildscript {
    ext {
        springBootVersion = '2.2.8.RELEASE'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}

configure(javaProjects) {

    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "com.ewerk.gradle.plugins.querydsl"

    group = 'com.deproment'
    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        implementation("com.querydsl:querydsl-jpa")
        implementation("com.querydsl:querydsl-apt")

        implementation 'org.springframework.boot:spring-boot-starter-security'
        testImplementation 'org.springframework.security:spring-security-test'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
    }

    def queryDslSrcDir = 'src/main/java/generated'

    querydsl {
        library = "com.querydsl:querydsl-apt"
        jpa = true
        querydslSourcesDir = queryDslSrcDir
    }

    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }

    configurations {
        querydsl.extendsFrom compileClasspath
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', queryDslSrcDir]
            }
        }
    }

}
